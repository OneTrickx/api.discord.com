name: Run Index.js

on:
    push:
        branches:
            - main # Triggers on push to the main branch
    workflow_dispatch: # Allows manual triggering via the GitHub UI
    schedule:
        - cron: '0 */5 * * *'

jobs:
    run-index:
        runs-on: ubuntu-latest

        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4

            # Set up Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            # Install dependencies
            - name: Install dependencies
              run: npm install

            # Run the index.js script
            - name: Run index.js
              run: npm run start

            # Run the logger script
            - name: Run logger.js
              run: npm run logger

            # Commit and push changes if there are any changes
            - name: Commit and Push changes
              run: |
                  git config --global user.name "${{ secrets.USERNAME }}"
                  git config --global user.email "${{ secrets.EMAIL }}"
                  git add .
                  git diff --cached
                  git commit -m "New Updates Detected & Webpack Update" || echo "No changes to commit"
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Increment the version and create a new release tag
            - name: Increment version and create a release
              run: |
                  VERSION=$(jq -r '.version_release' package.json)

                  if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                      echo "ERROR: Invalid version format. Expected format: X.Y.Z"
                      exit 1
                  fi

                  VERSION_PARTS=(${VERSION//./ })

                  if [ ${#VERSION_PARTS[@]} -lt 3 ]; then
                      echo "ERROR: Invalid version format. Expected at least 3 parts (X.Y.Z), got $VERSION"
                      exit 1
                  fi

                  MAJOR=${VERSION_PARTS[0]}
                  MINOR=${VERSION_PARTS[1]}
                  PATCH=${VERSION_PARTS[2]}

                  PATCH=$((PATCH + 1))

                  NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"

                  jq --arg new_version "$NEW_VERSION" '.version_release = $new_version' package.json > temp.json && mv temp.json package.json

                  git add package.json
                  git commit -m "Bump version to $NEW_VERSION"
                  git push

                  git tag "v$NEW_VERSION"
                  git push origin "v$NEW_VERSION"

                  gh release create "v$NEW_VERSION" ./* --title "Release $NEW_VERSION" --notes "Release of version $NEW_VERSION"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
